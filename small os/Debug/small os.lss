
small os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001120  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004cf  0080007c  0080007c  000011d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002525  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1a  00000000  00000000  00003a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ec  00000000  00000000  00004943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  00006130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f8e  00000000  00000000  000068e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cd8  00000000  00000000  0000786e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00009546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_1>
       8:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_2>
       c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 03 	call	0x686	; 0x686 <main>
      8a:	0c 94 8e 08 	jmp	0x111c	; 0x111c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TASK_1>:
	LED_toggle(LED_1);
}

void TASK_3(void)
{
	SOS_deinit();
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 05 03 	call	0x60a	; 0x60a <LED_toggle>
      98:	08 95       	ret

0000009a <TASK_2>:
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	0e 94 05 03 	call	0x60a	; 0x60a <LED_toggle>
      a0:	08 95       	ret

000000a2 <APP_ext_int0_cbf>:
      a2:	82 e4       	ldi	r24, 0x42	; 66
      a4:	97 e0       	ldi	r25, 0x07	; 7
      a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 86 08 	call	0x110c	; 0x110c <SOS_change_state>
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 c4 02 	call	0x588	; 0x588 <EXT_INTERRUPT_MANAGER_disable>
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_off>
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LED_off>
      c6:	08 95       	ret

000000c8 <APP_wake_up_cbf>:
      c8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <BUTTON_mainTask>
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 a2 02 	call	0x544	; 0x544 <BUTTON_getState>
      d2:	85 30       	cpi	r24, 0x05	; 5
      d4:	61 f4       	brne	.+24     	; 0xee <APP_wake_up_cbf+0x26>
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	97 e0       	ldi	r25, 0x07	; 7
      da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 86 08 	call	0x110c	; 0x110c <SOS_change_state>
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 c1 02 	call	0x582	; 0x582 <EXT_INTERRUPT_MANAGER_enable>
      ee:	08 95       	ret

000000f0 <APP_init>:
	//LED_off(LED_1);
}

void APP_init(void)
{
	LED_init(LED_0);
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 c7 02 	call	0x58e	; 0x58e <LED_init>
	LED_init(LED_1);
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	0e 94 c7 02 	call	0x58e	; 0x58e <LED_init>
	SOS_create_task(
      fc:	2c e2       	ldi	r18, 0x2C	; 44
      fe:	31 e0       	ldi	r19, 0x01	; 1
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	89 e4       	ldi	r24, 0x49	; 73
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 7d 07 	call	0xefa	; 0xefa <SOS_create_task>
	1,							// ID
	1,							// priority
	300							// period
	);
	
	SOS_create_task(
     10c:	24 ef       	ldi	r18, 0xF4	; 244
     10e:	31 e0       	ldi	r19, 0x01	; 1
     110:	43 e0       	ldi	r20, 0x03	; 3
     112:	62 e0       	ldi	r22, 0x02	; 2
     114:	8d e4       	ldi	r24, 0x4D	; 77
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 7d 07 	call	0xefa	; 0xefa <SOS_create_task>
	TASK_3,						// Function name
	3,							// ID
	2,							// priority
	5000							// period
	);*/
	SOS_init();
     11c:	0e 94 6d 08 	call	0x10da	; 0x10da <SOS_init>
	EXT_INTERRUPT_MANAGER_init(EXT_0,APP_ext_int0_cbf);
     120:	61 e5       	ldi	r22, 0x51	; 81
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 b2 02 	call	0x564	; 0x564 <EXT_INTERRUPT_MANAGER_init>
	sei();
     12a:	78 94       	sei
	EXT_INTERRUPT_MANAGER_enable(EXT_0);
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 c1 02 	call	0x582	; 0x582 <EXT_INTERRUPT_MANAGER_enable>
	BUTTON_init(Button_Start);
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 69 02 	call	0x4d2	; 0x4d2 <BUTTON_init>
	SOS_wake_up(APP_wake_up_cbf);
     138:	84 e6       	ldi	r24, 0x64	; 100
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 89 08 	call	0x1112	; 0x1112 <SOS_wake_up>
     140:	08 95       	ret

00000142 <APP_start>:

void APP_start(void)
{
	while(1)
	{
		(APP_runing_task)();
     142:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     146:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     14a:	09 95       	icall
     14c:	fa cf       	rjmp	.-12     	; 0x142 <APP_start>

0000014e <vidPrePushState>:
		default:
		break;
	}
}
static void vidPrePushState(en_btnId_t en_a_BtnId)
{
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	1f 92       	push	r1
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8BtnValue);
     15c:	08 2f       	mov	r16, r24
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	f8 01       	movw	r30, r16
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	e0 0f       	add	r30, r16
     168:	f1 1f       	adc	r31, r17
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	e4 58       	subi	r30, 0x84	; 132
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	61 81       	ldd	r22, Z+1	; 0x01
     174:	ae 01       	movw	r20, r28
     176:	4f 5f       	subi	r20, 0xFF	; 255
     178:	5f 4f       	sbci	r21, 0xFF	; 255
     17a:	80 81       	ld	r24, Z
     17c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8BtnValue == BT_RELEASE_LEVEL)
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	59 f4       	brne	.+22     	; 0x19c <vidPrePushState+0x4e>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PUSHED;
     186:	f8 01       	movw	r30, r16
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	e0 0f       	add	r30, r16
     18e:	f1 1f       	adc	r31, r17
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	e4 58       	subi	r30, 0x84	; 132
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	85 83       	std	Z+5, r24	; 0x05
     19a:	0a c0       	rjmp	.+20     	; 0x1b0 <vidPrePushState+0x62>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     19c:	f8 01       	movw	r30, r16
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	e0 0f       	add	r30, r16
     1a4:	f1 1f       	adc	r31, r17
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e4 58       	subi	r30, 0x84	; 132
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	15 82       	std	Z+5, r1	; 0x05
	}
}
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	08 95       	ret

000001bc <vidPushState>:
static void vidPushState(en_btnId_t en_a_BtnId)
{
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	1f 92       	push	r1
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8_BtnValue);
     1ca:	08 2f       	mov	r16, r24
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	f8 01       	movw	r30, r16
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	e0 0f       	add	r30, r16
     1d6:	f1 1f       	adc	r31, r17
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	e4 58       	subi	r30, 0x84	; 132
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	61 81       	ldd	r22, Z+1	; 0x01
     1e2:	ae 01       	movw	r20, r28
     1e4:	4f 5f       	subi	r20, 0xFF	; 255
     1e6:	5f 4f       	sbci	r21, 0xFF	; 255
     1e8:	80 81       	ld	r24, Z
     1ea:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	61 f4       	brne	.+24     	; 0x20c <vidPushState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_PRE_HOLD;
     1f4:	f8 01       	movw	r30, r16
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	e0 0f       	add	r30, r16
     1fc:	f1 1f       	adc	r31, r17
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	e4 58       	subi	r30, 0x84	; 132
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	85 83       	std	Z+5, r24	; 0x05
     20a:	0b c0       	rjmp	.+22     	; 0x222 <vidPushState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     20c:	f8 01       	movw	r30, r16
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	e0 0f       	add	r30, r16
     214:	f1 1f       	adc	r31, r17
     216:	ee 0f       	add	r30, r30
     218:	ff 1f       	adc	r31, r31
     21a:	e4 58       	subi	r30, 0x84	; 132
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	85 e0       	ldi	r24, 0x05	; 5
     220:	85 83       	std	Z+5, r24	; 0x05
	}
}
     222:	0f 90       	pop	r0
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	08 95       	ret

0000022e <vidPreHoldState>:
static void vidPreHoldState(en_btnId_t en_a_BtnId)
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8_BtnValue);
     23c:	08 2f       	mov	r16, r24
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	f8 01       	movw	r30, r16
     242:	ee 0f       	add	r30, r30
     244:	ff 1f       	adc	r31, r31
     246:	e0 0f       	add	r30, r16
     248:	f1 1f       	adc	r31, r17
     24a:	ee 0f       	add	r30, r30
     24c:	ff 1f       	adc	r31, r31
     24e:	e4 58       	subi	r30, 0x84	; 132
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	61 81       	ldd	r22, Z+1	; 0x01
     254:	ae 01       	movw	r20, r28
     256:	4f 5f       	subi	r20, 0xFF	; 255
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	80 81       	ld	r24, Z
     25c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	61 f4       	brne	.+24     	; 0x27e <vidPreHoldState+0x50>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState   = BT_HOLD;
     266:	f8 01       	movw	r30, r16
     268:	ee 0f       	add	r30, r30
     26a:	ff 1f       	adc	r31, r31
     26c:	e0 0f       	add	r30, r16
     26e:	f1 1f       	adc	r31, r17
     270:	ee 0f       	add	r30, r30
     272:	ff 1f       	adc	r31, r31
     274:	e4 58       	subi	r30, 0x84	; 132
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	85 83       	std	Z+5, r24	; 0x05
     27c:	0b c0       	rjmp	.+22     	; 0x294 <vidPreHoldState+0x66>
	}
	else
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_RELEASED;
     27e:	f8 01       	movw	r30, r16
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e0 0f       	add	r30, r16
     286:	f1 1f       	adc	r31, r17
     288:	ee 0f       	add	r30, r30
     28a:	ff 1f       	adc	r31, r31
     28c:	e4 58       	subi	r30, 0x84	; 132
     28e:	ff 4f       	sbci	r31, 0xFF	; 255
     290:	85 e0       	ldi	r24, 0x05	; 5
     292:	85 83       	std	Z+5, r24	; 0x05
	}
}
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	08 95       	ret

000002a0 <vidHoldState>:
static void vidHoldState(en_btnId_t en_a_BtnId)
{
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8_BtnValue);
     2ae:	08 2f       	mov	r16, r24
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	f8 01       	movw	r30, r16
     2b4:	ee 0f       	add	r30, r30
     2b6:	ff 1f       	adc	r31, r31
     2b8:	e0 0f       	add	r30, r16
     2ba:	f1 1f       	adc	r31, r17
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	e4 58       	subi	r30, 0x84	; 132
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	61 81       	ldd	r22, Z+1	; 0x01
     2c6:	ae 01       	movw	r20, r28
     2c8:	4f 5f       	subi	r20, 0xFF	; 255
     2ca:	5f 4f       	sbci	r21, 0xFF	; 255
     2cc:	80 81       	ld	r24, Z
     2ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	39 f5       	brne	.+78     	; 0x326 <vidHoldState+0x86>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     2d8:	c8 01       	movw	r24, r16
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	fc 01       	movw	r30, r24
     2e0:	e0 0f       	add	r30, r16
     2e2:	f1 1f       	adc	r31, r17
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	e4 58       	subi	r30, 0x84	; 132
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	23 81       	ldd	r18, Z+3	; 0x03
     2ee:	2f 5f       	subi	r18, 0xFF	; 255
     2f0:	23 83       	std	Z+3, r18	; 0x03
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= arr_st_gc_btnConfig[en_a_BtnId].u8_a_debounceThreshold)
     2f2:	fc 01       	movw	r30, r24
     2f4:	e0 0f       	add	r30, r16
     2f6:	f1 1f       	adc	r31, r17
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	e1 59       	subi	r30, 0x91	; 145
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	83 81       	ldd	r24, Z+3	; 0x03
     302:	28 17       	cp	r18, r24
     304:	80 f0       	brcs	.+32     	; 0x326 <vidHoldState+0x86>
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
     306:	f8 01       	movw	r30, r16
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	df 01       	movw	r26, r30
     30e:	a0 0f       	add	r26, r16
     310:	b1 1f       	adc	r27, r17
     312:	aa 0f       	add	r26, r26
     314:	bb 1f       	adc	r27, r27
     316:	a4 58       	subi	r26, 0x84	; 132
     318:	bf 4f       	sbci	r27, 0xFF	; 255
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	1c 92       	st	X, r1
     31e:	13 97       	sbiw	r26, 0x03	; 3
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_RELEASE;
     320:	fd 01       	movw	r30, r26
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	85 83       	std	Z+5, r24	; 0x05
	}
	else
	{
		// do nothing
	}
}
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <vidPreReleaseState>:
static void vidPreReleaseState(en_btnId_t en_a_BtnId)
{
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	1f 92       	push	r1
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8_BtnValue);
     340:	08 2f       	mov	r16, r24
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	f8 01       	movw	r30, r16
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	e0 0f       	add	r30, r16
     34c:	f1 1f       	adc	r31, r17
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	e4 58       	subi	r30, 0x84	; 132
     354:	ff 4f       	sbci	r31, 0xFF	; 255
     356:	61 81       	ldd	r22, Z+1	; 0x01
     358:	ae 01       	movw	r20, r28
     35a:	4f 5f       	subi	r20, 0xFF	; 255
     35c:	5f 4f       	sbci	r21, 0xFF	; 255
     35e:	80 81       	ld	r24, Z
     360:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8_BtnValue == BT_RELEASE_LEVEL)
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	b1 f4       	brne	.+44     	; 0x396 <vidPreReleaseState+0x64>
	{
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold++;
     36a:	c8 01       	movw	r24, r16
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	fc 01       	movw	r30, r24
     372:	e0 0f       	add	r30, r16
     374:	f1 1f       	adc	r31, r17
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e4 58       	subi	r30, 0x84	; 132
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	23 81       	ldd	r18, Z+3	; 0x03
     380:	fc 01       	movw	r30, r24
     382:	e0 0f       	add	r30, r16
     384:	f1 1f       	adc	r31, r17
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	e4 58       	subi	r30, 0x84	; 132
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	82 0f       	add	r24, r18
     392:	83 83       	std	Z+3, r24	; 0x03
     394:	35 c0       	rjmp	.+106    	; 0x400 <__EEPROM_REGION_LENGTH__>
	}
	else
	{
		if(st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold >= arr_st_gc_btnConfig[en_a_BtnId].u8_a_debounceThreshold)
     396:	c8 01       	movw	r24, r16
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	fc 01       	movw	r30, r24
     39e:	e0 0f       	add	r30, r16
     3a0:	f1 1f       	adc	r31, r17
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	e4 58       	subi	r30, 0x84	; 132
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	23 81       	ldd	r18, Z+3	; 0x03
     3ac:	fc 01       	movw	r30, r24
     3ae:	e0 0f       	add	r30, r16
     3b0:	f1 1f       	adc	r31, r17
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e1 59       	subi	r30, 0x91	; 145
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	83 81       	ldd	r24, Z+3	; 0x03
     3bc:	28 17       	cp	r18, r24
     3be:	60 f0       	brcs	.+24     	; 0x3d8 <vidPreReleaseState+0xa6>
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState = BT_RELEASED;
     3c0:	f8 01       	movw	r30, r16
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	e0 0f       	add	r30, r16
     3c8:	f1 1f       	adc	r31, r17
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	e4 58       	subi	r30, 0x84	; 132
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	85 e0       	ldi	r24, 0x05	; 5
     3d4:	85 83       	std	Z+5, r24	; 0x05
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <vidPreReleaseState+0xba>
		}
		else
		{
			st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     3d8:	f8 01       	movw	r30, r16
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e0 0f       	add	r30, r16
     3e0:	f1 1f       	adc	r31, r17
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	e4 58       	subi	r30, 0x84	; 132
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	15 82       	std	Z+5, r1	; 0x05
		}
		st_gs_strBtnInfo[en_a_BtnId].u8_a_debounceThreshold = ((uint8_t)0);
     3ec:	f8 01       	movw	r30, r16
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	e0 0f       	add	r30, r16
     3f4:	f1 1f       	adc	r31, r17
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e4 58       	subi	r30, 0x84	; 132
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	13 82       	std	Z+3, r1	; 0x03
	}
}
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <vidReleaseState>:
static void vidReleaseState(en_btnId_t en_a_BtnId)
{
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_BtnValue;
	
	DIO_readPIN((st_gs_strBtnInfo[en_a_BtnId].u8_a_port), (st_gs_strBtnInfo[en_a_BtnId].u8_a_pin),&u8_BtnValue);
     41a:	08 2f       	mov	r16, r24
     41c:	10 e0       	ldi	r17, 0x00	; 0
     41e:	f8 01       	movw	r30, r16
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e0 0f       	add	r30, r16
     426:	f1 1f       	adc	r31, r17
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	e4 58       	subi	r30, 0x84	; 132
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	61 81       	ldd	r22, Z+1	; 0x01
     432:	ae 01       	movw	r20, r28
     434:	4f 5f       	subi	r20, 0xFF	; 255
     436:	5f 4f       	sbci	r21, 0xFF	; 255
     438:	80 81       	ld	r24, Z
     43a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_readPIN>
	
	if(u8_BtnValue == BT_PUSH_LEVEL)
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	81 11       	cpse	r24, r1
     442:	0a c0       	rjmp	.+20     	; 0x458 <vidReleaseState+0x4c>
	{
		//strBtnInfo[enuBtnId].u8DebounceThreshold = ((uint8_t)0);
		st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState    = BT_PRE_PUSH;
     444:	f8 01       	movw	r30, r16
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	e0 0f       	add	r30, r16
     44c:	f1 1f       	adc	r31, r17
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	e4 58       	subi	r30, 0x84	; 132
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	15 82       	std	Z+5, r1	; 0x05
	}
	else
	{
		/* Do nothing */
	}
}
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <vidUpdateBtnState>:
/******************************************************************************/
/*********************** Private Functions Implementation *********************/
/******************************************************************************/
static void vidUpdateBtnState(en_btnId_t en_a_BtnId)
{
	switch(st_gs_strBtnInfo[en_a_BtnId].u8_a_btnState)
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	f9 01       	movw	r30, r18
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e2 0f       	add	r30, r18
     470:	f3 1f       	adc	r31, r19
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e4 58       	subi	r30, 0x84	; 132
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	95 81       	ldd	r25, Z+5	; 0x05
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	91 f0       	breq	.+36     	; 0x4a4 <vidUpdateBtnState+0x40>
     480:	28 f4       	brcc	.+10     	; 0x48c <vidUpdateBtnState+0x28>
     482:	99 23       	and	r25, r25
     484:	49 f0       	breq	.+18     	; 0x498 <vidUpdateBtnState+0x34>
     486:	91 30       	cpi	r25, 0x01	; 1
     488:	51 f0       	breq	.+20     	; 0x49e <vidUpdateBtnState+0x3a>
     48a:	08 95       	ret
     48c:	94 30       	cpi	r25, 0x04	; 4
     48e:	81 f0       	breq	.+32     	; 0x4b0 <vidUpdateBtnState+0x4c>
     490:	60 f0       	brcs	.+24     	; 0x4aa <vidUpdateBtnState+0x46>
     492:	95 30       	cpi	r25, 0x05	; 5
     494:	81 f0       	breq	.+32     	; 0x4b6 <vidUpdateBtnState+0x52>
     496:	08 95       	ret
	{
		case BT_PRE_PUSH:
		vidPrePushState(en_a_BtnId);
     498:	0e 94 a7 00 	call	0x14e	; 0x14e <vidPrePushState>
		break;
     49c:	08 95       	ret
		
		case BT_PUSHED:
		vidPushState(en_a_BtnId);
     49e:	0e 94 de 00 	call	0x1bc	; 0x1bc <vidPushState>
		break;
     4a2:	08 95       	ret
		
		case BT_PRE_HOLD:
		vidPreHoldState(en_a_BtnId);
     4a4:	0e 94 17 01 	call	0x22e	; 0x22e <vidPreHoldState>
		break;
     4a8:	08 95       	ret
		
		case BT_HOLD:
		vidHoldState(en_a_BtnId);
     4aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <vidHoldState>
		break;
     4ae:	08 95       	ret
		
		case BT_PRE_RELEASE:
		vidPreReleaseState(en_a_BtnId);
     4b0:	0e 94 99 01 	call	0x332	; 0x332 <vidPreReleaseState>
		break;
     4b4:	08 95       	ret
		
		case BT_RELEASED:
		vidReleaseState(en_a_BtnId);
     4b6:	0e 94 06 02 	call	0x40c	; 0x40c <vidReleaseState>
     4ba:	08 95       	ret

000004bc <BUTTON_mainTask>:
/******************************************************************************/



void BUTTON_mainTask(void)
{
     4bc:	cf 93       	push	r28
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<INVALID_BUTTON_ID; u8Index++)
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <BUTTON_mainTask+0xe>
	{
		vidUpdateBtnState((en_btnId_t)u8Index);
     4c2:	8c 2f       	mov	r24, r28
     4c4:	0e 94 32 02 	call	0x464	; 0x464 <vidUpdateBtnState>
void BUTTON_mainTask(void)
{
	uint8_t u8Index;
	
	
	for(u8Index=0;u8Index<INVALID_BUTTON_ID; u8Index++)
     4c8:	cf 5f       	subi	r28, 0xFF	; 255
     4ca:	cc 23       	and	r28, r28
     4cc:	d1 f3       	breq	.-12     	; 0x4c2 <BUTTON_mainTask+0x6>
	{
		vidUpdateBtnState((en_btnId_t)u8Index);
	}
}
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <BUTTON_init>:
en_btnState_t BUTTON_init(en_btnId_t en_btnId)
{
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	uint8_t u8_RetVal = BT_PRE_PUSH;
	if (INVALID_BUTTON_ID <= en_btnId)
     4de:	81 11       	cpse	r24, r1
     4e0:	27 c0       	rjmp	.+78     	; 0x530 <BUTTON_init+0x5e>
		u8_RetVal = BT_UNDEFINED;
	}
	else
	{
		// Set button pin as input
		u8_RetVal = DIO_init(arr_st_gc_btnConfig[en_btnId].u8_a_port, arr_st_gc_btnConfig[en_btnId].u8_a_pin , STD_INPUT);
     4e2:	c8 2f       	mov	r28, r24
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	7e 01       	movw	r14, r28
     4e8:	ee 0c       	add	r14, r14
     4ea:	ff 1c       	adc	r15, r15
     4ec:	f7 01       	movw	r30, r14
     4ee:	ec 0f       	add	r30, r28
     4f0:	fd 1f       	adc	r31, r29
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	e1 59       	subi	r30, 0x91	; 145
     4f8:	ff 4f       	sbci	r31, 0xFF	; 255
     4fa:	11 81       	ldd	r17, Z+1	; 0x01
     4fc:	00 81       	ld	r16, Z
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	61 2f       	mov	r22, r17
     502:	80 2f       	mov	r24, r16
     504:	0e 94 4a 03 	call	0x694	; 0x694 <DIO_init>
		// Enable PULLUP
		u8_RetVal = DIO_writePIN(arr_st_gc_btnConfig[en_btnId].u8_a_port, arr_st_gc_btnConfig[en_btnId].u8_a_pin, STD_HIGH);
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	61 2f       	mov	r22, r17
     50c:	80 2f       	mov	r24, r16
     50e:	0e 94 84 03 	call	0x708	; 0x708 <DIO_writePIN>
		st_gs_strBtnInfo[en_btnId].u8_a_btnState     = BT_PRE_PUSH;
     512:	f7 01       	movw	r30, r14
     514:	ec 0f       	add	r30, r28
     516:	fd 1f       	adc	r31, r29
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e4 58       	subi	r30, 0x84	; 132
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	15 82       	std	Z+5, r1	; 0x05
		st_gs_strBtnInfo[en_btnId].u8_a_debounceThreshold  = ((uint8_t)0U);
     522:	13 82       	std	Z+3, r1	; 0x03
		st_gs_strBtnInfo[en_btnId].u8_a_holdThreshold      = ((uint8_t)0U);
     524:	14 82       	std	Z+4, r1	; 0x04
		st_gs_strBtnInfo[en_btnId].u8_a_port = arr_st_gc_btnConfig[en_btnId].u8_a_port;
     526:	00 83       	st	Z, r16
		st_gs_strBtnInfo[en_btnId].u8_a_pin = arr_st_gc_btnConfig[en_btnId].u8_a_pin;
     528:	11 83       	std	Z+1, r17	; 0x01
		if (DIO_E_OK == u8_RetVal)
     52a:	81 11       	cpse	r24, r1
     52c:	03 c0       	rjmp	.+6      	; 0x534 <BUTTON_init+0x62>
     52e:	03 c0       	rjmp	.+6      	; 0x536 <BUTTON_init+0x64>
en_btnState_t BUTTON_init(en_btnId_t en_btnId)
{
	uint8_t u8_RetVal = BT_PRE_PUSH;
	if (INVALID_BUTTON_ID <= en_btnId)
	{
		u8_RetVal = BT_UNDEFINED;
     530:	86 e0       	ldi	r24, 0x06	; 6
     532:	01 c0       	rjmp	.+2      	; 0x536 <BUTTON_init+0x64>
		{
			//do nothing
		}
		else
		{
			u8_RetVal = BT_UNDEFINED;
     534:	86 e0       	ldi	r24, 0x06	; 6
		}
	}
	return u8_RetVal;
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <BUTTON_getState>:
en_btnState_t BUTTON_getState(en_btnId_t en_btnId)
{
	en_btnState_t enuReturn;
	
	if(INVALID_BUTTON_ID > en_btnId)
     544:	81 11       	cpse	r24, r1
     546:	0c c0       	rjmp	.+24     	; 0x560 <BUTTON_getState+0x1c>
	{
		enuReturn = st_gs_strBtnInfo[en_btnId].u8_a_btnState ;
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	e8 0f       	add	r30, r24
     552:	f9 1f       	adc	r31, r25
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	e4 58       	subi	r30, 0x84	; 132
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	85 81       	ldd	r24, Z+5	; 0x05
     55e:	08 95       	ret
	}
	else
	{
		enuReturn = BT_UNDEFINED;
     560:	86 e0       	ldi	r24, 0x06	; 6
	}
	
	return (enuReturn);
}
     562:	08 95       	ret

00000564 <EXT_INTERRUPT_MANAGER_init>:
 *  Author: Mahmoud Sarhan
 */ 
#include "ext_interrupt_manager.h"

u8_interruptError_t EXT_INTERRUPT_MANAGER_init(en_ext_interrupt_num_t en_ext_interrupt_num,void(*callback)(void))
{
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	c8 2f       	mov	r28, r24
     56c:	8b 01       	movw	r16, r22
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_init(en_ext_interrupt_num);
     56e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EXT_INTERRUPT_init>
	u8_interruptError_retVal = EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num,callback);
     572:	b8 01       	movw	r22, r16
     574:	8c 2f       	mov	r24, r28
     576:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EXT_INTERRUPT_set_callback_init>
	return u8_interruptError_retVal;
}
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <EXT_INTERRUPT_MANAGER_enable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_enable(en_ext_interrupt_num);
     582:	0e 94 94 04 	call	0x928	; 0x928 <EXT_INTERRUPT_enable>
	return u8_interruptError_retVal;
}
     586:	08 95       	ret

00000588 <EXT_INTERRUPT_MANAGER_disable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_disable(en_ext_interrupt_num);
     588:	0e 94 b2 04 	call	0x964	; 0x964 <EXT_INTERRUPT_disable>
	return u8_interruptError_retVal;
}
     58c:	08 95       	ret

0000058e <LED_init>:
	}
	else{
		u8_retVal = LED_ERROR_NOT_OK;
	}
	return u8_retVal;
}
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	88 f4       	brcc	.+34     	; 0x5b8 <LED_init+0x2a>
     596:	c8 2f       	mov	r28, r24
     598:	d0 e0       	ldi	r29, 0x00	; 0
     59a:	fe 01       	movw	r30, r28
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	eb 58       	subi	r30, 0x8B	; 139
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	61 81       	ldd	r22, Z+1	; 0x01
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	80 81       	ld	r24, Z
     5aa:	0e 94 4a 03 	call	0x694	; 0x694 <DIO_init>
     5ae:	ce 57       	subi	r28, 0x7E	; 126
     5b0:	df 4f       	sbci	r29, 0xFF	; 255
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	98 83       	st	Y, r25
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <LED_init+0x2c>
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <LED_off>:
u8_ledError_t LED_off(en_ledNum_t ledNum)
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	uint8_t u8_retVal = LED_ERROR_OK;
	if (ledNum < INVALID_LED)
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	d8 f4       	brcc	.+54     	; 0x5fe <LED_off+0x3e>
	{
		if (u8_ledState[ledNum] == ON)
     5c8:	c8 2f       	mov	r28, r24
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	fe 01       	movw	r30, r28
     5ce:	ee 57       	subi	r30, 0x7E	; 126
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	80 81       	ld	r24, Z
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	79 f4       	brne	.+30     	; 0x5f6 <LED_off+0x36>
		{
			u8_retVal = DIO_writePIN(st_gc_ledConfig[ledNum].port , st_gc_ledConfig[ledNum].pin , STD_LOW);
     5d8:	fe 01       	movw	r30, r28
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	eb 58       	subi	r30, 0x8B	; 139
     5e0:	ff 4f       	sbci	r31, 0xFF	; 255
     5e2:	61 81       	ldd	r22, Z+1	; 0x01
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	0e 94 84 03 	call	0x708	; 0x708 <DIO_writePIN>
			u8_ledState[ledNum] = OFF ;
     5ec:	ce 57       	subi	r28, 0x7E	; 126
     5ee:	df 4f       	sbci	r29, 0xFF	; 255
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	98 83       	st	Y, r25
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <LED_off+0x44>
		}
		else if (u8_ledState[ledNum] == OFF)
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	21 f4       	brne	.+8      	; 0x602 <LED_off+0x42>
	}
	return u8_retVal;
}
u8_ledError_t LED_off(en_ledNum_t ledNum)
{
	uint8_t u8_retVal = LED_ERROR_OK;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <LED_off+0x44>
		else{
			u8_retVal = LED_ERROR_NOT_OK;
		}
	}
	else{
		u8_retVal = LED_ERROR_NOT_OK;
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	01 c0       	rjmp	.+2      	; 0x604 <LED_off+0x44>
		else if (u8_ledState[ledNum] == OFF)
		{
			// Do nothing
		}
		else{
			u8_retVal = LED_ERROR_NOT_OK;
     602:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		u8_retVal = LED_ERROR_NOT_OK;
	}
	return u8_retVal;
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <LED_toggle>:

u8_ledError_t LED_toggle(en_ledNum_t ledNum)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	uint8_t u8_retVal = LED_ERROR_OK;
	if (ledNum < INVALID_LED)
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	40 f5       	brcc	.+80     	; 0x662 <LED_toggle+0x58>
	{
		if (u8_ledState[ledNum] == ON)
     612:	c8 2f       	mov	r28, r24
     614:	d0 e0       	ldi	r29, 0x00	; 0
     616:	fe 01       	movw	r30, r28
     618:	ee 57       	subi	r30, 0x7E	; 126
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	80 81       	ld	r24, Z
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	79 f4       	brne	.+30     	; 0x640 <LED_toggle+0x36>
		{
			u8_retVal = DIO_writePIN(st_gc_ledConfig[ledNum].port , st_gc_ledConfig[ledNum].pin , STD_LOW);
     622:	fe 01       	movw	r30, r28
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	eb 58       	subi	r30, 0x8B	; 139
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	61 81       	ldd	r22, Z+1	; 0x01
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	0e 94 84 03 	call	0x708	; 0x708 <DIO_writePIN>
			u8_ledState[ledNum] = OFF ;
     636:	ce 57       	subi	r28, 0x7E	; 126
     638:	df 4f       	sbci	r29, 0xFF	; 255
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	98 83       	st	Y, r25
     63e:	14 c0       	rjmp	.+40     	; 0x668 <LED_toggle+0x5e>
		}
		else if (u8_ledState[ledNum] == OFF)
     640:	83 30       	cpi	r24, 0x03	; 3
     642:	89 f4       	brne	.+34     	; 0x666 <LED_toggle+0x5c>
		{
			u8_retVal = DIO_writePIN(st_gc_ledConfig[ledNum].port , st_gc_ledConfig[ledNum].pin , STD_HIGH);
     644:	fe 01       	movw	r30, r28
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	eb 58       	subi	r30, 0x8B	; 139
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	61 81       	ldd	r22, Z+1	; 0x01
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	80 81       	ld	r24, Z
     654:	0e 94 84 03 	call	0x708	; 0x708 <DIO_writePIN>
			u8_ledState[ledNum] = ON ;
     658:	ce 57       	subi	r28, 0x7E	; 126
     65a:	df 4f       	sbci	r29, 0xFF	; 255
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	98 83       	st	Y, r25
     660:	03 c0       	rjmp	.+6      	; 0x668 <LED_toggle+0x5e>
		else{
			u8_retVal = LED_ERROR_NOT_OK;
		}
	}
	else{
		u8_retVal = LED_ERROR_NOT_OK;
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	01 c0       	rjmp	.+2      	; 0x668 <LED_toggle+0x5e>
		{
			u8_retVal = DIO_writePIN(st_gc_ledConfig[ledNum].port , st_gc_ledConfig[ledNum].pin , STD_HIGH);
			u8_ledState[ledNum] = ON ;
		}
		else{
			u8_retVal = LED_ERROR_NOT_OK;
     666:	85 e0       	ldi	r24, 0x05	; 5
	}
	else{
		u8_retVal = LED_ERROR_NOT_OK;
	}
	return u8_retVal;
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <TIMER_MANAGER_init>:



u8_timerErrors_t TIMER_MANAGER_init(en_timer_num_t en_timerNum)
{
	return TIMER_init(en_timerNum);
     66e:	0e 94 ed 05 	call	0xbda	; 0xbda <TIMER_init>
}
     672:	08 95       	ret

00000674 <TIMER_MANAGER_start>:
u8_timerErrors_t TIMER_MANAGER_start(en_timer_num_t en_timerNum)
{
	return TIMER_start(en_timerNum);
     674:	0e 94 55 06 	call	0xcaa	; 0xcaa <TIMER_start>
}
     678:	08 95       	ret

0000067a <TIMER_MANAGER_stop>:
u8_timerErrors_t TIMER_MANAGER_stop(en_timer_num_t en_timerNum)
{
	return TIMER_stop(en_timerNum);
     67a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <TIMER_stop>
}
     67e:	08 95       	ret

00000680 <TIMER_MANAGER_set_cbk>:
u8_timerErrors_t TIMER_MANAGER_set_cbk(timerCallBack callBackFunction_ptr,en_timer_num_t en_timerNum)
{
	return TIMER_set_cbk(callBackFunction_ptr,en_timerNum);
     680:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TIMER_set_cbk>
     684:	08 95       	ret

00000686 <main>:
#include "APP/app.h"


int main(void)
{
	APP_init();
     686:	0e 94 78 00 	call	0xf0	; 0xf0 <APP_init>
	APP_start();
     68a:	0e 94 a1 00 	call	0x142	; 0x142 <APP_start>
	
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret

00000694 <DIO_init>:


u8_dioErrors_t DIO_init (en_dioPorts_t port, en_dioPins_t pin, u8_dioDir_t direction)
{
	
	if (pin < DIO_MAX_PINS)
     694:	68 30       	cpi	r22, 0x08	; 8
     696:	a0 f5       	brcc	.+104    	; 0x700 <DIO_init+0x6c>
	{
		if (port == porta)
     698:	81 11       	cpse	r24, r1
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= direction << pin;
     69c:	8a b3       	in	r24, 0x1a	; 26
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_init+0x12>
     6a2:	44 0f       	add	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	6a 95       	dec	r22
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_init+0xe>
     6aa:	48 2b       	or	r20, r24
     6ac:	4a bb       	out	0x1a, r20	; 26
			return DIO_E_OK;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
		}
		else if (port == portb)
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	59 f4       	brne	.+22     	; 0x6cc <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= direction << pin;
     6b6:	87 b3       	in	r24, 0x17	; 23
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_init+0x2c>
     6bc:	44 0f       	add	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	6a 95       	dec	r22
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_init+0x28>
     6c4:	48 2b       	or	r20, r24
     6c6:	47 bb       	out	0x17, r20	; 23
			return DIO_E_OK;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 95       	ret
		}
		else if (port == portc)
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	59 f4       	brne	.+22     	; 0x6e6 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= direction << pin;
     6d0:	84 b3       	in	r24, 0x14	; 20
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_init+0x46>
     6d6:	44 0f       	add	r20, r20
     6d8:	55 1f       	adc	r21, r21
     6da:	6a 95       	dec	r22
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_init+0x42>
     6de:	48 2b       	or	r20, r24
     6e0:	44 bb       	out	0x14, r20	; 20
			return DIO_E_OK;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	08 95       	ret
		}
		else if (port == portd)
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	69 f4       	brne	.+26     	; 0x704 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= direction << pin;
     6ea:	81 b3       	in	r24, 0x11	; 17
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_init+0x60>
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	6a 95       	dec	r22
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_init+0x5c>
     6f8:	48 2b       	or	r20, r24
     6fa:	41 bb       	out	0x11, r20	; 17
			return DIO_E_OK;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	08 95       	ret
			DATA_DIRECTION_PORTD |= direction << pin;
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     704:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     706:	08 95       	ret

00000708 <DIO_writePIN>:
u8_dioErrors_t DIO_writePIN (en_dioPorts_t port, en_dioPins_t pin, u8_dioLevel_t state)
{
	if (pin < DIO_MAX_PINS)
     708:	68 30       	cpi	r22, 0x08	; 8
     70a:	08 f0       	brcs	.+2      	; 0x70e <DIO_writePIN+0x6>
     70c:	74 c0       	rjmp	.+232    	; 0x7f6 <DIO_writePIN+0xee>
	{
		if (port == porta)
     70e:	81 11       	cpse	r24, r1
     710:	1b c0       	rjmp	.+54     	; 0x748 <DIO_writePIN+0x40>
		{
			if (state == STD_HIGH)
     712:	41 30       	cpi	r20, 0x01	; 1
     714:	61 f4       	brne	.+24     	; 0x72e <DIO_writePIN+0x26>
			{
				WR_PORT_A |= (1U << pin);
     716:	2b b3       	in	r18, 0x1b	; 27
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_writePIN+0x1a>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	6a 95       	dec	r22
     724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_writePIN+0x16>
     726:	82 2b       	or	r24, r18
     728:	8b bb       	out	0x1b, r24	; 27
			}
			else{
				WR_PORT_A &= ~(1U << pin);
			}
			return DIO_E_OK;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_A |= (1U << pin);
			}
			else{
				WR_PORT_A &= ~(1U << pin);
     72e:	2b b3       	in	r18, 0x1b	; 27
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_writePIN+0x32>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	6a 95       	dec	r22
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_writePIN+0x2e>
     73e:	80 95       	com	r24
     740:	82 23       	and	r24, r18
     742:	8b bb       	out	0x1b, r24	; 27
			}
			return DIO_E_OK;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
		}
		else if (port == portb)
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	d9 f4       	brne	.+54     	; 0x782 <DIO_writePIN+0x7a>
		{
			if (state == STD_HIGH)
     74c:	41 30       	cpi	r20, 0x01	; 1
     74e:	61 f4       	brne	.+24     	; 0x768 <DIO_writePIN+0x60>
			{
				WR_PORT_B |= (1U << pin);
     750:	28 b3       	in	r18, 0x18	; 24
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_writePIN+0x54>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	6a 95       	dec	r22
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_writePIN+0x50>
     760:	82 2b       	or	r24, r18
     762:	88 bb       	out	0x18, r24	; 24
			}
			else{
				WR_PORT_B &= ~(1U << pin);
			}
			return DIO_E_OK;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_B |= (1U << pin);
			}
			else{
				WR_PORT_B &= ~(1U << pin);
     768:	28 b3       	in	r18, 0x18	; 24
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_writePIN+0x6c>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	6a 95       	dec	r22
     776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_writePIN+0x68>
     778:	80 95       	com	r24
     77a:	82 23       	and	r24, r18
     77c:	88 bb       	out	0x18, r24	; 24
			}
			return DIO_E_OK;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret
		}
		else if (port == portc)
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	d9 f4       	brne	.+54     	; 0x7bc <DIO_writePIN+0xb4>
		{
			if (state == STD_HIGH)
     786:	41 30       	cpi	r20, 0x01	; 1
     788:	61 f4       	brne	.+24     	; 0x7a2 <DIO_writePIN+0x9a>
			{
				WR_PORT_C |= (1U << pin);
     78a:	25 b3       	in	r18, 0x15	; 21
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_writePIN+0x8e>
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	6a 95       	dec	r22
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_writePIN+0x8a>
     79a:	82 2b       	or	r24, r18
     79c:	85 bb       	out	0x15, r24	; 21
			}
			else{
				WR_PORT_C &= ~(1U << pin);
			}
			return DIO_E_OK;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_C |= (1U << pin);
			}
			else{
				WR_PORT_C &= ~(1U << pin);
     7a2:	25 b3       	in	r18, 0x15	; 21
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_writePIN+0xa6>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	6a 95       	dec	r22
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_writePIN+0xa2>
     7b2:	80 95       	com	r24
     7b4:	82 23       	and	r24, r18
     7b6:	85 bb       	out	0x15, r24	; 21
			}
			return DIO_E_OK;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 95       	ret
		}
		else if (port == portd)
     7bc:	83 30       	cpi	r24, 0x03	; 3
     7be:	e9 f4       	brne	.+58     	; 0x7fa <DIO_writePIN+0xf2>
		{
			if (state == STD_HIGH)
     7c0:	41 30       	cpi	r20, 0x01	; 1
     7c2:	61 f4       	brne	.+24     	; 0x7dc <DIO_writePIN+0xd4>
			{
				WR_PORT_D |= (1U << pin);
     7c4:	22 b3       	in	r18, 0x12	; 18
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_writePIN+0xc8>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_writePIN+0xc4>
     7d4:	82 2b       	or	r24, r18
     7d6:	82 bb       	out	0x12, r24	; 18
			}
			else{
				WR_PORT_D &= ~(1U << pin);
			}
			return DIO_E_OK;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
			if (state == STD_HIGH)
			{
				WR_PORT_D |= (1U << pin);
			}
			else{
				WR_PORT_D &= ~(1U << pin);
     7dc:	22 b3       	in	r18, 0x12	; 18
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_writePIN+0xe0>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	6a 95       	dec	r22
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_writePIN+0xdc>
     7ec:	80 95       	com	r24
     7ee:	82 23       	and	r24, r18
     7f0:	82 bb       	out	0x12, r24	; 18
			}
			return DIO_E_OK;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	08 95       	ret
			}
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     7fa:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
}
     7fc:	08 95       	ret

000007fe <DIO_readPIN>:
u8_dioErrors_t DIO_readPIN (en_dioPorts_t port, en_dioPins_t pin, u8_dioLevel_t* value)
{
	if (pin < DIO_MAX_PINS)
     7fe:	68 30       	cpi	r22, 0x08	; 8
     800:	08 f0       	brcs	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	64 c0       	rjmp	.+200    	; 0x8cc <__stack+0x6d>
	{
		if (port == porta)
     804:	81 11       	cpse	r24, r1
     806:	17 c0       	rjmp	.+46     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
		{
			*value = ((RE_PORT_A & (1U<<pin))>>pin);
     808:	79 b3       	in	r23, 0x19	; 25
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9c 01       	movw	r18, r24
     810:	06 2e       	mov	r0, r22
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	22 0f       	add	r18, r18
     816:	33 1f       	adc	r19, r19
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	87 2f       	mov	r24, r23
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	82 23       	and	r24, r18
     822:	93 23       	and	r25, r19
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	96 95       	lsr	r25
     828:	87 95       	ror	r24
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	fa 01       	movw	r30, r20
     830:	80 83       	st	Z, r24
			return DIO_E_OK;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
		}
		else if (port == portb)
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	b9 f4       	brne	.+46     	; 0x868 <__stack+0x9>
		{
			*value = ((RE_PORT_B & (1U<<pin))>>pin);
     83a:	76 b3       	in	r23, 0x16	; 22
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	9c 01       	movw	r18, r24
     842:	06 2e       	mov	r0, r22
     844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	0a 94       	dec	r0
     84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     84e:	87 2f       	mov	r24, r23
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	82 23       	and	r24, r18
     854:	93 23       	and	r25, r19
     856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     858:	96 95       	lsr	r25
     85a:	87 95       	ror	r24
     85c:	6a 95       	dec	r22
     85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     860:	fa 01       	movw	r30, r20
     862:	80 83       	st	Z, r24
			return DIO_E_OK;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
		}
		else if (port == portc)
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	b9 f4       	brne	.+46     	; 0x89a <__stack+0x3b>
		{
			*value = ((RE_PORT_C & (1U<<pin))>>pin);
     86c:	73 b3       	in	r23, 0x13	; 19
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9c 01       	movw	r18, r24
     874:	06 2e       	mov	r0, r22
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	0a 94       	dec	r0
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
     880:	87 2f       	mov	r24, r23
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	82 23       	and	r24, r18
     886:	93 23       	and	r25, r19
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	96 95       	lsr	r25
     88c:	87 95       	ror	r24
     88e:	6a 95       	dec	r22
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	fa 01       	movw	r30, r20
     894:	80 83       	st	Z, r24
			return DIO_E_OK;
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret
		}
		else if (port == portd)
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	c9 f4       	brne	.+50     	; 0x8d0 <__stack+0x71>
		{
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
     89e:	70 b3       	in	r23, 0x10	; 16
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	9c 01       	movw	r18, r24
     8a6:	06 2e       	mov	r0, r22
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__stack+0x4f>
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <__stack+0x4b>
     8b2:	87 2f       	mov	r24, r23
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	82 23       	and	r24, r18
     8b8:	93 23       	and	r25, r19
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	fa 01       	movw	r30, r20
     8c6:	80 83       	st	Z, r24
			return DIO_E_OK;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	08 95       	ret
			return DIO_InvalidPort;
		}
		
	}
	else{
		return DIO_InvalidPin;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	08 95       	ret
			*value = ((RE_PORT_D & (1U<<pin))>>pin);
			return DIO_E_OK;
		}
		else
		{
			return DIO_InvalidPort;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	else{
		return DIO_InvalidPin;
	}
     8d2:	08 95       	ret

000008d4 <EXT_INTERRUPT_init>:
static uint8_t u8_gs_ext_int_state[INVALID_EXT_INT] = {NOT_INIT};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (INVALID_EDGE == arr_en_gc_edge_detection[en_ext_interrupt_num]))
     8d4:	83 30       	cpi	r24, 0x03	; 3
     8d6:	11 f1       	breq	.+68     	; 0x91c <EXT_INTERRUPT_init+0x48>
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e7 58       	subi	r30, 0x87	; 135
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	90 81       	ld	r25, Z
     8e2:	94 30       	cpi	r25, 0x04	; 4
     8e4:	e9 f0       	breq	.+58     	; 0x920 <EXT_INTERRUPT_init+0x4c>
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
	}
	else
	{
		switch (en_ext_interrupt_num)
     8e6:	88 23       	and	r24, r24
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <EXT_INTERRUPT_init+0x1c>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	61 f0       	breq	.+24     	; 0x906 <EXT_INTERRUPT_init+0x32>
     8ee:	1a c0       	rjmp	.+52     	; 0x924 <EXT_INTERRUPT_init+0x50>
		{
			case EXT_0:
			{
				MCUCR_ADD |= arr_en_gc_edge_detection[EXT_0];
     8f0:	85 b7       	in	r24, 0x35	; 53
     8f2:	82 60       	ori	r24, 0x02	; 2
     8f4:	85 bf       	out	0x35, r24	; 53
				SREG_ADD |= Globle_INT;
     8f6:	8f b7       	in	r24, 0x3f	; 63
     8f8:	87 60       	ori	r24, 0x07	; 7
     8fa:	8f bf       	out	0x3f, r24	; 63
				u8_gs_ext_int_state[EXT_0] = INIT;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <u8_gs_ext_int_state>

static uint8_t u8_gs_ext_int_state[INVALID_EXT_INT] = {NOT_INIT};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     902:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_0:
			{
				MCUCR_ADD |= arr_en_gc_edge_detection[EXT_0];
				SREG_ADD |= Globle_INT;
				u8_gs_ext_int_state[EXT_0] = INIT;
				break;
     904:	08 95       	ret
			}

			case EXT_1:
			{
				MCUCR_ADD |= (arr_en_gc_edge_detection[EXT_1]<<2);
     906:	85 b7       	in	r24, 0x35	; 53
     908:	88 60       	ori	r24, 0x08	; 8
     90a:	85 bf       	out	0x35, r24	; 53
				SREG_ADD |= (1<<Globle_INT);
     90c:	8f b7       	in	r24, 0x3f	; 63
     90e:	80 68       	ori	r24, 0x80	; 128
     910:	8f bf       	out	0x3f, r24	; 63
				u8_gs_ext_int_state[EXT_1] = INIT;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_gs_ext_int_state+0x1>

static uint8_t u8_gs_ext_int_state[INVALID_EXT_INT] = {NOT_INIT};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     918:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_1:
			{
				MCUCR_ADD |= (arr_en_gc_edge_detection[EXT_1]<<2);
				SREG_ADD |= (1<<Globle_INT);
				u8_gs_ext_int_state[EXT_1] = INIT;
				break;
     91a:	08 95       	ret
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (INVALID_EDGE == arr_en_gc_edge_detection[en_ext_interrupt_num]))
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	08 95       	ret
     920:	84 e0       	ldi	r24, 0x04	; 4
     922:	08 95       	ret

static uint8_t u8_gs_ext_int_state[INVALID_EXT_INT] = {NOT_INIT};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     924:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
	}
	return u8_interruptError_retVal;
}
     926:	08 95       	ret

00000928 <EXT_INTERRUPT_enable>:


u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (NOT_INIT == u8_gs_ext_int_state[en_ext_interrupt_num]))
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	b1 f0       	breq	.+44     	; 0x958 <EXT_INTERRUPT_enable+0x30>
     92c:	e8 2f       	mov	r30, r24
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ec 57       	subi	r30, 0x7C	; 124
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	90 81       	ld	r25, Z
     936:	99 23       	and	r25, r25
     938:	89 f0       	breq	.+34     	; 0x95c <EXT_INTERRUPT_enable+0x34>
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
	}
	else
	{
		switch (en_ext_interrupt_num)
     93a:	88 23       	and	r24, r24
     93c:	19 f0       	breq	.+6      	; 0x944 <EXT_INTERRUPT_enable+0x1c>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	31 f0       	breq	.+12     	; 0x94e <EXT_INTERRUPT_enable+0x26>
     942:	0e c0       	rjmp	.+28     	; 0x960 <EXT_INTERRUPT_enable+0x38>
		{
			case EXT_0:
			{
				GICR_ADD |= (INIT<<INT0_Globle);
     944:	8b b7       	in	r24, 0x3b	; 59
     946:	80 64       	ori	r24, 0x40	; 64
     948:	8b bf       	out	0x3b, r24	; 59



u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     94a:	80 e0       	ldi	r24, 0x00	; 0
		switch (en_ext_interrupt_num)
		{
			case EXT_0:
			{
				GICR_ADD |= (INIT<<INT0_Globle);
				break;
     94c:	08 95       	ret
			}
			case EXT_1:
			{
				GICR_ADD |= (INIT<<INT1_Globle);
     94e:	8b b7       	in	r24, 0x3b	; 59
     950:	80 68       	ori	r24, 0x80	; 128
     952:	8b bf       	out	0x3b, r24	; 59



u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     954:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case EXT_1:
			{
				GICR_ADD |= (INIT<<INT1_Globle);
				break;
     956:	08 95       	ret
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (NOT_INIT == u8_gs_ext_int_state[en_ext_interrupt_num]))
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	08 95       	ret
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	08 95       	ret



u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     960:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
	}
	return u8_interruptError_retVal;
}
     962:	08 95       	ret

00000964 <EXT_INTERRUPT_disable>:


u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (NOT_INIT == u8_gs_ext_int_state[en_ext_interrupt_num]))
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	b1 f0       	breq	.+44     	; 0x994 <EXT_INTERRUPT_disable+0x30>
     968:	e8 2f       	mov	r30, r24
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	ec 57       	subi	r30, 0x7C	; 124
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	90 81       	ld	r25, Z
     972:	99 23       	and	r25, r25
     974:	89 f0       	breq	.+34     	; 0x998 <EXT_INTERRUPT_disable+0x34>
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
	}
	else
	{
		switch (en_ext_interrupt_num)
     976:	88 23       	and	r24, r24
     978:	19 f0       	breq	.+6      	; 0x980 <EXT_INTERRUPT_disable+0x1c>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	31 f0       	breq	.+12     	; 0x98a <EXT_INTERRUPT_disable+0x26>
     97e:	0e c0       	rjmp	.+28     	; 0x99c <EXT_INTERRUPT_disable+0x38>
		{
			case EXT_0:
			{
				GICR_ADD &= ~(INIT<<INT0_Globle);
     980:	8b b7       	in	r24, 0x3b	; 59
     982:	8f 7b       	andi	r24, 0xBF	; 191
     984:	8b bf       	out	0x3b, r24	; 59



u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     986:	80 e0       	ldi	r24, 0x00	; 0
		switch (en_ext_interrupt_num)
		{
			case EXT_0:
			{
				GICR_ADD &= ~(INIT<<INT0_Globle);
				break;
     988:	08 95       	ret
			}
			case EXT_1:
			{
				GICR_ADD &= ~(INIT<<INT1_Globle);
     98a:	8b b7       	in	r24, 0x3b	; 59
     98c:	8f 77       	andi	r24, 0x7F	; 127
     98e:	8b bf       	out	0x3b, r24	; 59



u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     990:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			case EXT_1:
			{
				GICR_ADD &= ~(INIT<<INT1_Globle);
				break;
     992:	08 95       	ret
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	if ((INVALID_EXT_INT == en_ext_interrupt_num) || (NOT_INIT == u8_gs_ext_int_state[en_ext_interrupt_num]))
	{
		u8_interruptError_retVal = EXT_INT_E_NOK;
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	08 95       	ret
     998:	84 e0       	ldi	r24, 0x04	; 4
     99a:	08 95       	ret



u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
     99c:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}
	}
	return u8_interruptError_retVal;
}
     99e:	08 95       	ret

000009a0 <EXT_INTERRUPT_set_callback_init>:




u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num ,void(*callback)(void))
{
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	c8 2f       	mov	r28, r24
     9a8:	8b 01       	movw	r16, r22
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_disable(en_ext_interrupt_num);
     9aa:	0e 94 b2 04 	call	0x964	; 0x964 <EXT_INTERRUPT_disable>
	if (u8_interruptError_retVal)
     9ae:	81 11       	cpse	r24, r1
     9b0:	14 c0       	rjmp	.+40     	; 0x9da <EXT_INTERRUPT_set_callback_init+0x3a>
	{
		// do nothing
	}
	else
	{
		switch(en_ext_interrupt_num)
     9b2:	c1 30       	cpi	r28, 0x01	; 1
     9b4:	49 f0       	breq	.+18     	; 0x9c8 <EXT_INTERRUPT_set_callback_init+0x28>
     9b6:	18 f0       	brcs	.+6      	; 0x9be <EXT_INTERRUPT_set_callback_init+0x1e>
     9b8:	c2 30       	cpi	r28, 0x02	; 2
     9ba:	59 f0       	breq	.+22     	; 0x9d2 <EXT_INTERRUPT_set_callback_init+0x32>
     9bc:	0e c0       	rjmp	.+28     	; 0x9da <EXT_INTERRUPT_set_callback_init+0x3a>
		{
			case EXT_0:
			{
				callback_EXT_0 = callback;
     9be:	10 93 8c 00 	sts	0x008C, r17	; 0x80008c <callback_EXT_0+0x1>
     9c2:	00 93 8b 00 	sts	0x008B, r16	; 0x80008b <callback_EXT_0>
				break;
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <EXT_INTERRUPT_set_callback_init+0x3a>
			}
			case EXT_1:
			{
				callback_EXT_1 = callback;
     9c8:	10 93 8a 00 	sts	0x008A, r17	; 0x80008a <callback_EXT_1+0x1>
     9cc:	00 93 89 00 	sts	0x0089, r16	; 0x800089 <callback_EXT_1>
				break;
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <EXT_INTERRUPT_set_callback_init+0x3a>
			}
			case EXT_2:
			{
				callback_EXT_2 = callback;
     9d2:	10 93 88 00 	sts	0x0088, r17	; 0x800088 <callback_EXT_2+0x1>
     9d6:	00 93 87 00 	sts	0x0087, r16	; 0x800087 <callback_EXT_2>
				break;
			}
		}
	}
	return u8_interruptError_retVal;
}
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <__vector_1>:
*   -Description-
*-interrupt service routine for  external interrupt 0
*
*/
ISR(EXT_INT0)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
	(callback_EXT_0)();
     a04:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <callback_EXT_0>
     a08:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <callback_EXT_0+0x1>
     a0c:	09 95       	icall
}
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__vector_2>:
*   -Description-
*-interrupt service routine for  external interrupt10
*
*/
ISR(EXT_INT1)
{
     a30:	1f 92       	push	r1
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	6f 93       	push	r22
     a44:	7f 93       	push	r23
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
	(callback_EXT_1)();
     a52:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <callback_EXT_1>
     a56:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <callback_EXT_1+0x1>
     a5a:	09 95       	icall
}
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_3>:
*   -Description-
*-interrupt service routine for  external interrupt 2
*
*/
ISR(EXT_INT2)
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	2f 93       	push	r18
     a8a:	3f 93       	push	r19
     a8c:	4f 93       	push	r20
     a8e:	5f 93       	push	r21
     a90:	6f 93       	push	r22
     a92:	7f 93       	push	r23
     a94:	8f 93       	push	r24
     a96:	9f 93       	push	r25
     a98:	af 93       	push	r26
     a9a:	bf 93       	push	r27
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
	(callback_EXT_2)();
     aa0:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <callback_EXT_2>
     aa4:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <callback_EXT_2+0x1>
     aa8:	09 95       	icall
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	bf 91       	pop	r27
     ab0:	af 91       	pop	r26
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	7f 91       	pop	r23
     ab8:	6f 91       	pop	r22
     aba:	5f 91       	pop	r21
     abc:	4f 91       	pop	r20
     abe:	3f 91       	pop	r19
     ac0:	2f 91       	pop	r18
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_11>:




ISR(TIMER0_OVF)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
	if(NULL != v_gs_arr_ptr_Timer_callBack[TIMER_0])
     aee:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <v_gs_arr_ptr_Timer_callBack>
     af2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <v_gs_arr_ptr_Timer_callBack+0x1>
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	21 f0       	breq	.+8      	; 0xb02 <__vector_11+0x36>
	{
		//Call the Call Back function in the upper layer after the timer overflow
		(v_gs_arr_ptr_Timer_callBack[TIMER_0])();
     afa:	09 95       	icall
		
		// reset the timer value with the configured value
		TCNT0 = st_timer_0_config.u16_timer_InitialValue & U8_BIT_REG_MASK;
     afc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <st_timer_0_config+0x1>
     b00:	82 bf       	out	0x32, r24	; 50
	}
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_9>:


ISR(TIMER1_OVF)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
	if(NULL != v_gs_arr_ptr_Timer_callBack[TIMER_1])
     b46:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <v_gs_arr_ptr_Timer_callBack+0x2>
     b4a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <v_gs_arr_ptr_Timer_callBack+0x3>
     b4e:	30 97       	sbiw	r30, 0x00	; 0
     b50:	39 f0       	breq	.+14     	; 0xb60 <__vector_9+0x3c>
	{
		// Call the Call Back function in the upper layer after the timer overflow
		(v_gs_arr_ptr_Timer_callBack[TIMER_1])();
     b52:	09 95       	icall
		// reset the timer value with the configured value
		TCNT1 = st_timer_1_config.u16_timer_InitialValue;
     b54:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <st_timer_1_config+0x1>
     b58:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <st_timer_1_config+0x2>
     b5c:	9d bd       	out	0x2d, r25	; 45
     b5e:	8c bd       	out	0x2c, r24	; 44
	}
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_5>:



ISR(TIMER2_OVF)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	if(NULL != v_gs_arr_ptr_Timer_callBack[TIMER_2])
     ba4:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <v_gs_arr_ptr_Timer_callBack+0x4>
     ba8:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <v_gs_arr_ptr_Timer_callBack+0x5>
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	21 f0       	breq	.+8      	; 0xbb8 <__vector_5+0x36>
	{
		// Call the Call Back function in the upper layer after the timer overflow
		(v_gs_arr_ptr_Timer_callBack[TIMER_2])();
     bb0:	09 95       	icall
		// reset the timer value with the configured value
		TCNT2 = st_timer_2_config.u16_timer_InitialValue & U8_BIT_REG_MASK;
     bb2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <st_timer_2_config+0x1>
     bb6:	84 bd       	out	0x24, r24	; 36
	}
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <TIMER_init>:

u8_timerErrors_t TIMER_init(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
	
	if (INVALID_TIMER_NUM > en_timerNum)
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <TIMER_init+0x6>
     bde:	55 c0       	rjmp	.+170    	; 0xc8a <TIMER_init+0xb0>
	{
		switch(en_timerNum)
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	f1 f0       	breq	.+60     	; 0xc20 <TIMER_init+0x46>
     be4:	18 f0       	brcs	.+6      	; 0xbec <TIMER_init+0x12>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	c1 f1       	breq	.+112    	; 0xc5a <TIMER_init+0x80>
     bea:	51 c0       	rjmp	.+162    	; 0xc8e <TIMER_init+0xb4>
		{
			case  TIMER_0:
			{
				if (INVALID_TIMER_CLK == st_timer_0_config.u8_timerClock || NO_CLOCK == st_timer_0_config.u8_timerClock)
     bec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <st_timer_0_config>
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <TIMER_init+0x1c>
     bf4:	4e c0       	rjmp	.+156    	; 0xc92 <TIMER_init+0xb8>
     bf6:	88 23       	and	r24, r24
     bf8:	09 f4       	brne	.+2      	; 0xbfc <TIMER_init+0x22>
     bfa:	4d c0       	rjmp	.+154    	; 0xc96 <TIMER_init+0xbc>
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					/*Configure initial value in TCNT0 for Timer0 to start count from it*/
					TCNT0 = st_timer_0_config.u16_timer_InitialValue & U8_BIT_REG_MASK;
     bfc:	ea e6       	ldi	r30, 0x6A	; 106
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	82 bf       	out	0x32, r24	; 50
					/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
					SET_BIT(TCCR0,FOC0);
     c04:	83 b7       	in	r24, 0x33	; 51
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	83 bf       	out	0x33, r24	; 51
					if(TIMER_INTERRUPT_FEATURE_ENABLE==st_timer_0_config.en_timer_ovf_int_enable)
     c0a:	83 81       	ldd	r24, Z+3	; 0x03
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	19 f4       	brne	.+6      	; 0xc16 <TIMER_init+0x3c>
					{
						/* Enable Timer0 overflow interrupt*/
						SET_BIT(TIMSK,TOIE0);
     c10:	89 b7       	in	r24, 0x39	; 57
     c12:	81 60       	ori	r24, 0x01	; 1
     c14:	89 bf       	out	0x39, r24	; 57
					}
					else
					{
						// DO NOTHING
					}
					u8_gs_timer_0_state = INIT;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <u8_gs_timer_0_state>



u8_timerErrors_t TIMER_init(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	08 95       	ret
				}
				break;
			}
			case TIMER_1:
			{
				if (INVALID_TIMER_CLK == st_timer_1_config.u8_timerClock || NO_CLOCK == st_timer_1_config.u8_timerClock)
     c20:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <st_timer_1_config>
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	c9 f1       	breq	.+114    	; 0xc9a <TIMER_init+0xc0>
     c28:	88 23       	and	r24, r24
     c2a:	c9 f1       	breq	.+114    	; 0xc9e <TIMER_init+0xc4>
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
					TCNT1 = st_timer_1_config.u16_timer_InitialValue;
     c2c:	e6 e6       	ldi	r30, 0x66	; 102
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	81 81       	ldd	r24, Z+1	; 0x01
     c32:	92 81       	ldd	r25, Z+2	; 0x02
     c34:	9d bd       	out	0x2d, r25	; 45
     c36:	8c bd       	out	0x2c, r24	; 44
					/*Configure the TIMER1 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
					/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
					SET_BIT(TCCR1A,FOC1A);
     c38:	8f b5       	in	r24, 0x2f	; 47
     c3a:	88 60       	ori	r24, 0x08	; 8
     c3c:	8f bd       	out	0x2f, r24	; 47
					SET_BIT(TCCR1A,FOC1B);
     c3e:	8f b5       	in	r24, 0x2f	; 47
     c40:	84 60       	ori	r24, 0x04	; 4
     c42:	8f bd       	out	0x2f, r24	; 47
					if(TIMER_INTERRUPT_FEATURE_ENABLE==st_timer_1_config.en_timer_ovf_int_enable)
     c44:	83 81       	ldd	r24, Z+3	; 0x03
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	19 f4       	brne	.+6      	; 0xc50 <TIMER_init+0x76>
					{
						/* Enable Timer1 overflow interrupt*/
						SET_BIT(TIMSK,TOIE1);
     c4a:	89 b7       	in	r24, 0x39	; 57
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	89 bf       	out	0x39, r24	; 57
					}
					else
					{
						// DO NOTHING
					}
					u8_gs_timer_1_state = INIT;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <u8_gs_timer_1_state>



u8_timerErrors_t TIMER_init(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	08 95       	ret
				}
				break;
			}
			case TIMER_2:
			{
				if (INVALID_TIMER_CLK == st_timer_2_config.u8_timerClock || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock)
     c5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <st_timer_2_config>
     c5e:	88 30       	cpi	r24, 0x08	; 8
     c60:	01 f1       	breq	.+64     	; 0xca2 <TIMER_init+0xc8>
     c62:	88 23       	and	r24, r24
     c64:	01 f1       	breq	.+64     	; 0xca6 <TIMER_init+0xcc>
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					/*Configure initial value in TCNT for Timer2 to start count from it*/
					TCNT2 = st_timer_2_config.u16_timer_InitialValue & U8_BIT_REG_MASK;
     c66:	e2 e6       	ldi	r30, 0x62	; 98
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	84 bd       	out	0x24, r24	; 36
					/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
					SET_BIT(TCCR2,FOC2);
     c6e:	85 b5       	in	r24, 0x25	; 37
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	85 bd       	out	0x25, r24	; 37
					if(TIMER_INTERRUPT_FEATURE_ENABLE== st_timer_2_config.en_timer_ovf_int_enable)
     c74:	83 81       	ldd	r24, Z+3	; 0x03
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	19 f4       	brne	.+6      	; 0xc80 <TIMER_init+0xa6>
					{
						/* Enable Timer2 overflow interrupt*/
						SET_BIT(TIMSK,TOIE2);
     c7a:	89 b7       	in	r24, 0x39	; 57
     c7c:	80 64       	ori	r24, 0x40	; 64
     c7e:	89 bf       	out	0x39, r24	; 57
					}
					else
					{
						// DO NOTHING
					}
					u8_gs_timer_2_state = INIT;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <u8_gs_timer_2_state>



u8_timerErrors_t TIMER_init(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret
			}
		}
	}
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	08 95       	ret



u8_timerErrors_t TIMER_init(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret
		{
			case  TIMER_0:
			{
				if (INVALID_TIMER_CLK == st_timer_0_config.u8_timerClock || NO_CLOCK == st_timer_0_config.u8_timerClock)
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	08 95       	ret
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	08 95       	ret
			}
			case TIMER_1:
			{
				if (INVALID_TIMER_CLK == st_timer_1_config.u8_timerClock || NO_CLOCK == st_timer_1_config.u8_timerClock)
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	08 95       	ret
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	08 95       	ret
			}
			case TIMER_2:
			{
				if (INVALID_TIMER_CLK == st_timer_2_config.u8_timerClock || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock)
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	08 95       	ret
     ca6:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
	}
	return u8_timerErrors_retVal;
}
     ca8:	08 95       	ret

00000caa <TIMER_start>:
u8_timerErrors_t TIMER_start(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
	
	if (INVALID_TIMER_NUM > en_timerNum)
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	38 f5       	brcc	.+78     	; 0xcfc <TIMER_start+0x52>
	{
		switch(en_timerNum)
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	79 f0       	breq	.+30     	; 0xcd0 <TIMER_start+0x26>
     cb2:	18 f0       	brcs	.+6      	; 0xcba <TIMER_start+0x10>
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	b9 f0       	breq	.+46     	; 0xce6 <TIMER_start+0x3c>
     cb8:	23 c0       	rjmp	.+70     	; 0xd00 <TIMER_start+0x56>
		{
			case TIMER_0:
			{
				if (NOT_INIT == u8_gs_timer_0_state || NO_CLOCK == st_timer_0_config.u8_timerClock )
     cba:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <u8_gs_timer_0_state>
     cbe:	88 23       	and	r24, r24
     cc0:	09 f1       	breq	.+66     	; 0xd04 <TIMER_start+0x5a>
     cc2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <st_timer_0_config>
     cc6:	88 23       	and	r24, r24
     cc8:	f9 f0       	breq	.+62     	; 0xd08 <TIMER_start+0x5e>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR0 = st_timer_0_config.u8_timerClock;
     cca:	83 bf       	out	0x33, r24	; 51
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_start(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
				}
				break;
			}
			case TIMER_1:
			{
				if (NOT_INIT == u8_gs_timer_1_state || NO_CLOCK == st_timer_1_config.u8_timerClock )
     cd0:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u8_gs_timer_1_state>
     cd4:	88 23       	and	r24, r24
     cd6:	d1 f0       	breq	.+52     	; 0xd0c <TIMER_start+0x62>
     cd8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <st_timer_1_config>
     cdc:	88 23       	and	r24, r24
     cde:	c1 f0       	breq	.+48     	; 0xd10 <TIMER_start+0x66>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR1B = st_timer_1_config.u8_timerClock;
     ce0:	8e bd       	out	0x2e, r24	; 46
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_start(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	08 95       	ret
				}
				break;
			}
			case TIMER_2:
			{
				if (NOT_INIT == u8_gs_timer_2_state || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock )
     ce6:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <u8_gs_timer_2_state>
     cea:	88 23       	and	r24, r24
     cec:	99 f0       	breq	.+38     	; 0xd14 <TIMER_start+0x6a>
     cee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <st_timer_2_config>
     cf2:	88 23       	and	r24, r24
     cf4:	89 f0       	breq	.+34     	; 0xd18 <TIMER_start+0x6e>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR2 = st_timer_2_config.u8_timerClock;
     cf6:	85 bd       	out	0x25, r24	; 37
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_start(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret
			}
		}
	}
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	08 95       	ret
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_start(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	08 95       	ret
		{
			case TIMER_0:
			{
				if (NOT_INIT == u8_gs_timer_0_state || NO_CLOCK == st_timer_0_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	08 95       	ret
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	08 95       	ret
			}
			case TIMER_1:
			{
				if (NOT_INIT == u8_gs_timer_1_state || NO_CLOCK == st_timer_1_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	08 95       	ret
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	08 95       	ret
			}
			case TIMER_2:
			{
				if (NOT_INIT == u8_gs_timer_2_state || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	08 95       	ret
     d18:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
	}
	return u8_timerErrors_retVal;
}
     d1a:	08 95       	ret

00000d1c <TIMER_stop>:
u8_timerErrors_t TIMER_stop(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
	if (INVALID_TIMER_NUM > en_timerNum)
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	38 f5       	brcc	.+78     	; 0xd6e <TIMER_stop+0x52>
	{
		switch(en_timerNum)
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	79 f0       	breq	.+30     	; 0xd42 <TIMER_stop+0x26>
     d24:	18 f0       	brcs	.+6      	; 0xd2c <TIMER_stop+0x10>
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	b9 f0       	breq	.+46     	; 0xd58 <TIMER_stop+0x3c>
     d2a:	23 c0       	rjmp	.+70     	; 0xd72 <TIMER_stop+0x56>
		{
			case TIMER_0:
			{
				if (NOT_INIT == u8_gs_timer_0_state || NO_CLOCK == st_timer_0_config.u8_timerClock )
     d2c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <u8_gs_timer_0_state>
     d30:	88 23       	and	r24, r24
     d32:	09 f1       	breq	.+66     	; 0xd76 <TIMER_stop+0x5a>
     d34:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <st_timer_0_config>
     d38:	88 23       	and	r24, r24
     d3a:	f9 f0       	breq	.+62     	; 0xd7a <TIMER_stop+0x5e>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR0 = NO_CLOCK;
     d3c:	13 be       	out	0x33, r1	; 51
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_stop(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret
				}
				break;
			}
			case TIMER_1:
			{
				if (NOT_INIT == u8_gs_timer_1_state || NO_CLOCK == st_timer_1_config.u8_timerClock )
     d42:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u8_gs_timer_1_state>
     d46:	88 23       	and	r24, r24
     d48:	d1 f0       	breq	.+52     	; 0xd7e <TIMER_stop+0x62>
     d4a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <st_timer_1_config>
     d4e:	88 23       	and	r24, r24
     d50:	c1 f0       	breq	.+48     	; 0xd82 <TIMER_stop+0x66>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR1B = NO_CLOCK;
     d52:	1e bc       	out	0x2e, r1	; 46
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_stop(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 95       	ret
				}
				break;
			}
			case TIMER_2:
			{
				if (NOT_INIT == u8_gs_timer_2_state || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock )
     d58:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <u8_gs_timer_2_state>
     d5c:	88 23       	and	r24, r24
     d5e:	99 f0       	breq	.+38     	; 0xd86 <TIMER_stop+0x6a>
     d60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <st_timer_2_config>
     d64:	88 23       	and	r24, r24
     d66:	89 f0       	breq	.+34     	; 0xd8a <TIMER_stop+0x6e>
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
				}
				else
				{
					TCCR2 = TIMER_2_NO_CLOCK;
     d68:	15 bc       	out	0x25, r1	; 37
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_stop(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
			}
		}
	}
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	08 95       	ret
	}
	return u8_timerErrors_retVal;
}
u8_timerErrors_t TIMER_stop(en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	08 95       	ret
		{
			case TIMER_0:
			{
				if (NOT_INIT == u8_gs_timer_0_state || NO_CLOCK == st_timer_0_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	08 95       	ret
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	08 95       	ret
			}
			case TIMER_1:
			{
				if (NOT_INIT == u8_gs_timer_1_state || NO_CLOCK == st_timer_1_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	08 95       	ret
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	08 95       	ret
			}
			case TIMER_2:
			{
				if (NOT_INIT == u8_gs_timer_2_state || TIMER_2_NO_CLOCK == st_timer_2_config.u8_timerClock )
				{
					u8_timerErrors_retVal = TIMER_E_NOT_OK;
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	08 95       	ret
     d8a:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
	}
	return u8_timerErrors_retVal;
}
     d8c:	08 95       	ret

00000d8e <TIMER_set_cbk>:


u8_timerErrors_t TIMER_set_cbk(timerCallBack callBackFunction_ptr,en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
	if (INVALID_TIMER_NUM > en_timerNum && NULL != callBackFunction_ptr)
     d8e:	63 30       	cpi	r22, 0x03	; 3
     d90:	60 f4       	brcc	.+24     	; 0xdaa <TIMER_set_cbk+0x1c>
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	61 f0       	breq	.+24     	; 0xdae <TIMER_set_cbk+0x20>
	{
		v_gs_arr_ptr_Timer_callBack[en_timerNum] = callBackFunction_ptr;
     d96:	e6 2f       	mov	r30, r22
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	e3 57       	subi	r30, 0x73	; 115
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24



u8_timerErrors_t TIMER_set_cbk(timerCallBack callBackFunction_ptr,en_timer_num_t en_timerNum)
{
	u8_timerErrors_t u8_timerErrors_retVal = TIMER_E_OK;
     da6:	80 e0       	ldi	r24, 0x00	; 0
	if (INVALID_TIMER_NUM > en_timerNum && NULL != callBackFunction_ptr)
	{
		v_gs_arr_ptr_Timer_callBack[en_timerNum] = callBackFunction_ptr;
     da8:	08 95       	ret
	}
	else
	{
		u8_timerErrors_retVal = TIMER_E_NOT_OK;
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	08 95       	ret
     dae:	83 e0       	ldi	r24, 0x03	; 3
	}
	return u8_timerErrors_retVal;
}
     db0:	08 95       	ret

00000db2 <SOS_tick_cbf>:
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
	}
	return enu_system_status_retVal;
}
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	21 c0       	rjmp	.+66     	; 0xdf8 <SOS_tick_cbf+0x46>
     db6:	82 2f       	mov	r24, r18
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	fc 01       	movw	r30, r24
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e6 56       	subi	r30, 0x66	; 102
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	40 81       	ld	r20, Z
     dc6:	51 81       	ldd	r21, Z+1	; 0x01
     dc8:	fc 01       	movw	r30, r24
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e5 5d       	subi	r30, 0xD5	; 213
     dd8:	fd 4f       	sbci	r31, 0xFD	; 253
     dda:	64 81       	ldd	r22, Z+4	; 0x04
     ddc:	75 81       	ldd	r23, Z+5	; 0x05
     dde:	46 17       	cp	r20, r22
     de0:	57 07       	cpc	r21, r23
     de2:	49 f0       	breq	.+18     	; 0xdf6 <SOS_tick_cbf+0x44>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	fc 01       	movw	r30, r24
     dea:	e6 56       	subi	r30, 0x66	; 102
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	4f 5f       	subi	r20, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	51 83       	std	Z+1, r21	; 0x01
     df4:	40 83       	st	Z, r20
     df6:	2f 5f       	subi	r18, 0xFF	; 255
     df8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_gs_max_count_of_tasks>
     dfc:	28 17       	cp	r18, r24
     dfe:	d8 f2       	brcs	.-74     	; 0xdb6 <SOS_tick_cbf+0x4>
     e00:	08 95       	ret

00000e02 <SOS_run>:
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	0e 94 3a 03 	call	0x674	; 0x674 <TIMER_MANAGER_start>
     e0e:	32 c0       	rjmp	.+100    	; 0xe74 <SOS_run+0x72>
     e10:	0c 2f       	mov	r16, r28
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	f8 01       	movw	r30, r16
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	e5 5d       	subi	r30, 0xD5	; 213
     e24:	fd 4f       	sbci	r31, 0xFD	; 253
     e26:	24 81       	ldd	r18, Z+4	; 0x04
     e28:	35 81       	ldd	r19, Z+5	; 0x05
     e2a:	f8 01       	movw	r30, r16
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e6 56       	subi	r30, 0x66	; 102
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	a1 f4       	brne	.+40     	; 0xe66 <SOS_run+0x64>
     e3e:	f8 01       	movw	r30, r16
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	e5 5d       	subi	r30, 0xD5	; 213
     e4e:	fd 4f       	sbci	r31, 0xFD	; 253
     e50:	01 90       	ld	r0, Z+
     e52:	f0 81       	ld	r31, Z
     e54:	e0 2d       	mov	r30, r0
     e56:	09 95       	icall
     e58:	00 0f       	add	r16, r16
     e5a:	11 1f       	adc	r17, r17
     e5c:	f8 01       	movw	r30, r16
     e5e:	e6 56       	subi	r30, 0x66	; 102
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
     e66:	cf 5f       	subi	r28, 0xFF	; 255
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <SOS_run+0x6a>
     e6a:	c1 e0       	ldi	r28, 0x01	; 1
     e6c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_gs_max_count_of_tasks>
     e70:	c8 17       	cp	r28, r24
     e72:	70 f2       	brcs	.-100    	; 0xe10 <SOS_run+0xe>
     e74:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8_gs_sos_module_state>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	b9 f3       	breq	.-18     	; 0xe6a <SOS_run+0x68>
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <SOS_disable>:
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 3d 03 	call	0x67a	; 0x67a <TIMER_MANAGER_stop>
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <SOS_disable+0x12>
     e8c:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <ptr_function_wake_up_routine>
     e90:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <ptr_function_wake_up_routine+0x1>
     e94:	09 95       	icall
     e96:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8_gs_sos_module_state>
     e9a:	88 23       	and	r24, r24
     e9c:	b9 f3       	breq	.-18     	; 0xe8c <SOS_disable+0x8>
     e9e:	08 95       	ret

00000ea0 <SOS_token_config_param>:
     ea0:	9c 01       	movw	r18, r24
     ea2:	e6 2f       	mov	r30, r22
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	e9 53       	subi	r30, 0x39	; 57
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	80 81       	ld	r24, Z
     eac:	81 11       	cpse	r24, r1
     eae:	1f c0       	rjmp	.+62     	; 0xeee <SOS_token_config_param+0x4e>
     eb0:	e4 2f       	mov	r30, r20
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	ed 59       	subi	r30, 0x9D	; 157
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	80 81       	ld	r24, Z
     eba:	81 11       	cpse	r24, r1
     ebc:	1a c0       	rjmp	.+52     	; 0xef2 <SOS_token_config_param+0x52>
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <SOS_token_config_param+0x42>
     ec2:	e9 2f       	mov	r30, r25
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e5 5d       	subi	r30, 0xD5	; 213
     ed4:	fd 4f       	sbci	r31, 0xFD	; 253
     ed6:	40 81       	ld	r20, Z
     ed8:	51 81       	ldd	r21, Z+1	; 0x01
     eda:	42 17       	cp	r20, r18
     edc:	53 07       	cpc	r21, r19
     ede:	59 f0       	breq	.+22     	; 0xef6 <SOS_token_config_param+0x56>
     ee0:	9f 5f       	subi	r25, 0xFF	; 255
     ee2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_gs_max_count_of_tasks>
     ee6:	98 17       	cp	r25, r24
     ee8:	60 f3       	brcs	.-40     	; 0xec2 <SOS_token_config_param+0x22>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	08 95       	ret
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	08 95       	ret
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	08 95       	ret
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	08 95       	ret

00000efa <SOS_create_task>:
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	09 f4       	brne	.+2      	; 0xf12 <SOS_create_task+0x18>
     f10:	41 c0       	rjmp	.+130    	; 0xf94 <SOS_create_task+0x9a>
     f12:	64 36       	cpi	r22, 0x64	; 100
     f14:	08 f0       	brcs	.+2      	; 0xf18 <SOS_create_task+0x1e>
     f16:	40 c0       	rjmp	.+128    	; 0xf98 <SOS_create_task+0x9e>
     f18:	44 36       	cpi	r20, 0x64	; 100
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <SOS_create_task+0x24>
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <SOS_create_task+0xa2>
     f1e:	d0 90 6e 00 	lds	r13, 0x006E	; 0x80006e <u8_gs_max_count_of_tasks>
     f22:	0d 2d       	mov	r16, r13
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	f8 01       	movw	r30, r16
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	e5 5d       	subi	r30, 0xD5	; 213
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	01 90       	ld	r0, Z+
     f3a:	f0 81       	ld	r31, Z
     f3c:	e0 2d       	mov	r30, r0
     f3e:	ef 2b       	or	r30, r31
     f40:	79 f5       	brne	.+94     	; 0xfa0 <SOS_create_task+0xa6>
     f42:	79 01       	movw	r14, r18
     f44:	d4 2f       	mov	r29, r20
     f46:	c6 2f       	mov	r28, r22
     f48:	5c 01       	movw	r10, r24
     f4a:	0e 94 50 07 	call	0xea0	; 0xea0 <SOS_token_config_param>
     f4e:	87 30       	cpi	r24, 0x07	; 7
     f50:	49 f1       	breq	.+82     	; 0xfa4 <SOS_create_task+0xaa>
     f52:	f8 01       	movw	r30, r16
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	e5 5d       	subi	r30, 0xD5	; 213
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	b1 82       	std	Z+1, r11	; 0x01
     f66:	a0 82       	st	Z, r10
     f68:	d3 83       	std	Z+3, r29	; 0x03
     f6a:	f5 82       	std	Z+5, r15	; 0x05
     f6c:	e4 82       	std	Z+4, r14	; 0x04
     f6e:	f7 82       	std	Z+7, r15	; 0x07
     f70:	e6 82       	std	Z+6, r14	; 0x06
     f72:	c2 83       	std	Z+2, r28	; 0x02
     f74:	ed 2f       	mov	r30, r29
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	ed 59       	subi	r30, 0x9D	; 157
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	d0 82       	st	Z, r13
     f7e:	6c 2f       	mov	r22, r28
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	fb 01       	movw	r30, r22
     f84:	e9 53       	subi	r30, 0x39	; 57
     f86:	fe 4f       	sbci	r31, 0xFE	; 254
     f88:	d0 82       	st	Z, r13
     f8a:	d3 94       	inc	r13
     f8c:	d0 92 6e 00 	sts	0x006E, r13	; 0x80006e <u8_gs_max_count_of_tasks>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <SOS_create_task+0xac>
     f94:	87 e0       	ldi	r24, 0x07	; 7
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <SOS_create_task+0xac>
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <SOS_create_task+0xac>
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <SOS_create_task+0xac>
     fa0:	87 e0       	ldi	r24, 0x07	; 7
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <SOS_create_task+0xac>
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	bf 90       	pop	r11
     fb6:	af 90       	pop	r10
     fb8:	08 95       	ret

00000fba <SOS_rearrange_tasks>:
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	7c c0       	rjmp	.+248    	; 0x10c2 <SOS_rearrange_tasks+0x108>
     fca:	71 e0       	ldi	r23, 0x01	; 1
     fcc:	75 0f       	add	r23, r21
     fce:	47 2f       	mov	r20, r23
     fd0:	74 c0       	rjmp	.+232    	; 0x10ba <SOS_rearrange_tasks+0x100>
     fd2:	25 2f       	mov	r18, r21
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e5 5d       	subi	r30, 0xD5	; 213
     fe6:	fd 4f       	sbci	r31, 0xFD	; 253
     fe8:	a3 81       	ldd	r26, Z+3	; 0x03
     fea:	84 2f       	mov	r24, r20
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	e5 5d       	subi	r30, 0xD5	; 213
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	e3 81       	ldd	r30, Z+3	; 0x03
    1002:	ae 17       	cp	r26, r30
    1004:	08 f0       	brcs	.+2      	; 0x1008 <SOS_rearrange_tasks+0x4e>
    1006:	58 c0       	rjmp	.+176    	; 0x10b8 <SOS_rearrange_tasks+0xfe>
    1008:	f9 01       	movw	r30, r18
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e5 5d       	subi	r30, 0xD5	; 213
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	c0 81       	ld	r28, Z
    101c:	d1 81       	ldd	r29, Z+1	; 0x01
    101e:	dc 01       	movw	r26, r24
    1020:	aa 0f       	add	r26, r26
    1022:	bb 1f       	adc	r27, r27
    1024:	aa 0f       	add	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	aa 0f       	add	r26, r26
    102a:	bb 1f       	adc	r27, r27
    102c:	a5 5d       	subi	r26, 0xD5	; 213
    102e:	bd 4f       	sbci	r27, 0xFD	; 253
    1030:	0d 91       	ld	r16, X+
    1032:	1c 91       	ld	r17, X
    1034:	11 97       	sbiw	r26, 0x01	; 1
    1036:	11 83       	std	Z+1, r17	; 0x01
    1038:	00 83       	st	Z, r16
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	dc 93       	st	X, r29
    103e:	ce 93       	st	-X, r28
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	26 56       	subi	r18, 0x66	; 102
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	e9 01       	movw	r28, r18
    104a:	18 81       	ld	r17, Y
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	ec 01       	movw	r28, r24
    1052:	c6 56       	subi	r28, 0x66	; 102
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	7e 01       	movw	r14, r28
    1058:	88 81       	ld	r24, Y
    105a:	99 81       	ldd	r25, Y+1	; 0x01
    105c:	e9 01       	movw	r28, r18
    105e:	99 83       	std	Y+1, r25	; 0x01
    1060:	88 83       	st	Y, r24
    1062:	81 2f       	mov	r24, r17
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	e7 01       	movw	r28, r14
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	88 83       	st	Y, r24
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	14 96       	adiw	r26, 0x04	; 4
    1072:	2d 91       	ld	r18, X+
    1074:	3c 91       	ld	r19, X
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	35 83       	std	Z+5, r19	; 0x05
    107a:	24 83       	std	Z+4, r18	; 0x04
    107c:	15 96       	adiw	r26, 0x05	; 5
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
    1082:	14 97       	sbiw	r26, 0x04	; 4
    1084:	22 81       	ldd	r18, Z+2	; 0x02
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	8c 91       	ld	r24, X
    108a:	12 97       	sbiw	r26, 0x02	; 2
    108c:	82 83       	std	Z+2, r24	; 0x02
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	2c 93       	st	X, r18
    1092:	12 97       	sbiw	r26, 0x02	; 2
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	89 53       	subi	r24, 0x39	; 57
    109a:	9e 4f       	sbci	r25, 0xFE	; 254
    109c:	ec 01       	movw	r28, r24
    109e:	58 83       	st	Y, r21
    10a0:	c2 2f       	mov	r28, r18
    10a2:	d0 e0       	ldi	r29, 0x00	; 0
    10a4:	c9 53       	subi	r28, 0x39	; 57
    10a6:	de 4f       	sbci	r29, 0xFE	; 254
    10a8:	48 83       	st	Y, r20
    10aa:	83 81       	ldd	r24, Z+3	; 0x03
    10ac:	13 96       	adiw	r26, 0x03	; 3
    10ae:	9c 91       	ld	r25, X
    10b0:	13 97       	sbiw	r26, 0x03	; 3
    10b2:	93 83       	std	Z+3, r25	; 0x03
    10b4:	13 96       	adiw	r26, 0x03	; 3
    10b6:	8c 93       	st	X, r24
    10b8:	4f 5f       	subi	r20, 0xFF	; 255
    10ba:	46 17       	cp	r20, r22
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <SOS_rearrange_tasks+0x106>
    10be:	89 cf       	rjmp	.-238    	; 0xfd2 <SOS_rearrange_tasks+0x18>
    10c0:	57 2f       	mov	r21, r23
    10c2:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <u8_gs_max_count_of_tasks>
    10c6:	56 17       	cp	r21, r22
    10c8:	08 f4       	brcc	.+2      	; 0x10cc <SOS_rearrange_tasks+0x112>
    10ca:	7f cf       	rjmp	.-258    	; 0xfca <SOS_rearrange_tasks+0x10>
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <SOS_init>:
    10da:	cf 93       	push	r28
    10dc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <u8_gs_sos_module_state>
    10e0:	81 11       	cpse	r24, r1
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <SOS_init+0x26>
    10e4:	0e 94 37 03 	call	0x66e	; 0x66e <TIMER_MANAGER_init>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	89 ed       	ldi	r24, 0xD9	; 217
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	0e 94 40 03 	call	0x680	; 0x680 <TIMER_MANAGER_set_cbk>
    10f2:	c8 2f       	mov	r28, r24
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <u8_gs_sos_module_state>
    10fa:	0e 94 dd 07 	call	0xfba	; 0xfba <SOS_rearrange_tasks>
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <SOS_init+0x28>
    1100:	c7 e0       	ldi	r28, 0x07	; 7
    1102:	c1 11       	cpse	r28, r1
    1104:	c7 e0       	ldi	r28, 0x07	; 7
    1106:	8c 2f       	mov	r24, r28
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <SOS_change_state>:
	}
}

void SOS_change_state(uint8_t u8_state)
{
	u8_gs_sos_module_state = u8_state;
    110c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <u8_gs_sos_module_state>
    1110:	08 95       	ret

00001112 <SOS_wake_up>:
}


void SOS_wake_up(ptr_function_name_t ptr_function_name)
{
	ptr_function_wake_up_routine = ptr_function_name;
    1112:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <ptr_function_wake_up_routine+0x1>
    1116:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <ptr_function_wake_up_routine>
    111a:	08 95       	ret

0000111c <_exit>:
    111c:	f8 94       	cli

0000111e <__stop_program>:
    111e:	ff cf       	rjmp	.-2      	; 0x111e <__stop_program>
